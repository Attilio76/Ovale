import { format, gmatch, gsub, find, len, lower, sub, upper } from "@wowts/string";
import * as fs from "fs";
import { Ovale } from "../Ovale";
import { OvaleOptions } from "../Options";
import { OvaleAST } from "../AST";
import { OvaleData } from "../Data";
import { eventDispatcher } from "@wowts/wow-mock";
import { OvaleEquipment } from "../Equipment";
import { OvaleSpellBook } from "../SpellBook";
import { OvaleStance } from "../Stance";
import { OvaleCompile } from "../Compile";
import { OvaleSimulationCraft } from "../SimulationCraft";

let outputDirectory = "src/scripts";
let profilesDirectory = "node_modules/simulationcraft/profiles/Tier19P";
let root = "../";
let SIMC_CLASS = [
    "deathknight",
    "demonhunter",
    "druid",
    "hunter",
    "mage",
    "monk",
    "paladin",
    "priest",
    "rogue",
    "shaman",
    "warlock",
    "warrior"
];

function Canonicalize(s: string) {
    let token = "xXxUnDeRsCoReXxX";
    s = s.toLowerCase();
    s = s.replace(/[\s\-\_\(\)\{\}\[\]]/g, token);
    s = s.replace(/\./g, "");
    s = s.replace(/xXxUnDeRsCoReXxX/g, "_");
    s = s.replace("_+", "_");
    s = s.replace("^_", "");
    s = s.replace("_$", "");
    return s;
}

if (!fs.existsSync(outputDirectory)) fs.mkdirSync(outputDirectory);

{
    for (const simcClass of SIMC_CLASS) {
        let output: string[] = []
        let fileName = outputDirectory + "/ovale_" + simcClass + ".ts";
        const file = fs.readFileSync(fileName, { encoding: "utf8" });
        const lines = file.split("\n");
        let passthrough = true;
        for (const line of lines) {
            if (passthrough) {
                output.push(line);
                if (line.indexOf("THE REST OF THIS FILE IS AUTOMATICALLY GENERATED") >= 0) {
                    output.push("// ANY CHANGES MADE BELOW THIS POINT WILL BE LOST.\n");
                    passthrough = false;
                }
            } else {
                break;
            }
        }
        fs.writeFileSync(fileName, output.join("\n"));
    }
}
let files = []
{
    let dir = fs.readdirSync(profilesDirectory);
    for (const name of dir) {
        files.push(name);
    }
    files.sort();
}
for (const filename of files) {
    let output: string[] = []
    let inputName = profilesDirectory + "/" + filename;
    let simc = fs.readFileSync(inputName, { encoding: "utf8" });
    if (simc.indexOf("optimal_raid=") < 0) {
        let source: string, className: string, specialization: string;
        for (const line of simc.match(/[^\r\n]+/g)) {
            if (!source) {
                if (line.substring(0, 3) == "### ") {
                    source = line.substring(4);
                }
            }
            if (!className) {
                for (const simcClass of SIMC_CLASS) {
                    let length = simcClass.length;
                    if (line.substring(0, length) == simcClass + "=") {
                        className = simcClass.toUpperCase();
                    }
                }
            }
            if (!specialization) {
                if (line.substring(0, 4) == "spec=") {
                    specialization = line.substring(5);
                }
            }
            if (className && specialization) {
                break;
            }
        }
        let config = {
            class: className,
            specialization: specialization
        }
        console.log(filename);
        Ovale.playerGUID = "player";
        eventDispatcher.DispatchEvent("ADDON_LOADED", "Ovale");
        OvaleEquipment.UpdateEquippedItems();
        OvaleSpellBook.Update();
        OvaleStance.UpdateStances();
        let profile = OvaleSimulationCraft.ParseProfile(simc);
        let profileName = sub(profile.annotation.name, 2, -2);
        let name: string, desc: string;
        if (source) {
            desc = format("%s: %s", source, profileName);
        } else {
            desc = profileName;
        }
        name = Canonicalize(desc);
        output.push("");
        output.push("{");
        output.push(format('	const name = "%s"', name));
        output.push(format('	const desc = "[7.0] %s"', desc));
        output.push("	const code = `");
        output.push(OvaleSimulationCraft.Emit(profile, true));
        output.push("`");
        output.push(format('	OvaleScripts.RegisterScript("%s", "%s", name, desc, code, "%s")', profile.annotation.class, profile.annotation.specialization, "script"));
        output.push("}");
        output.push("");
        let outputFileName = "ovale_" + className.toLowerCase() + ".ts";
        console.log("Appending to " + outputFileName + ": " + name);
        let outputName = outputDirectory + "/" + outputFileName;
        fs.writeFileSync(outputName, output.join("\n"));
    }
}
